"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _passportStrategy = require("passport-strategy");
/* eslint-disable no-param-reassign */

class GraphQLLocalStrategy extends _passportStrategy.Strategy {
  constructor(options, verify) {
    super();
    if (typeof options === 'function') {
      this.verify = options;
      this.passReqToCallback = false;
    } else {
      this.verify = verify;
      this.passReqToCallback = options.passReqToCallback;
    }
    if (!this.verify) {
      throw new TypeError('GraphQLLocalStrategy requires a verify callback');
    }
    this.name = 'graphql-local';
  }
  authenticate(req, options) {
    const {
      username,
      email,
      password
    } = options;
    const done = (err, user, info) => {
      if (err) {
        return this.error(err);
      }
      if (!user) {
        return this.fail(info, 401);
      }
      return this.success(user, info);
    };
    if (this.passReqToCallback) {
      // @ts-ignore - not sure how tow handle this nicely in TS
      this.verify(req, username || email, password, done);
    } else {
      // @ts-ignore - not sure how tow handle this nicely in TS
      this.verify(username || email, password, done);
    }
  }
}
var _default = GraphQLLocalStrategy;
exports.default = _default;
//# sourceMappingURL=GraphQLLocalStrategy.js.map