"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.default = void 0;
var _passport = _interopRequireDefault(require("passport"));
function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { default: obj }; }
/* eslint-disable max-len */

const promisifiedAuthentication = (req, res, name, options) => new Promise((resolve, reject) => {
  const done = (err, user, info) => {
    if (err) reject(err);else resolve({
      user,
      info
    });
  };
  const authFn = _passport.default.authenticate(name, options, done);
  return authFn(req, res);
});
const promisifiedLogin = (req, user, options) => new Promise((resolve, reject) => {
  const done = err => {
    if (err) reject(err);else resolve();
  };
  req.login(user, options, done);
});
const promisifiedLogout = (req, options) => new Promise((resolve, reject) => {
  const done = err => {
    if (err) reject(err);else resolve();
  };
  req.logout(options, done);
});
const buildCommonContext = (req, additionalContext) => ({
  isAuthenticated: () => req.isAuthenticated(),
  isUnauthenticated: () => req.isUnauthenticated(),
  getUser: () => req.user,
  authenticate: strategyName => {
    throw new Error(`Authenticate (${strategyName}) not implemented for subscriptions`);
  },
  login: () => {
    throw new Error('Not implemented for subscriptions');
  },
  logout: () => {
    throw new Error('Not implemented for subscriptions');
  },
  req,
  ...additionalContext
});
// function buildContext(contextParams: RegularContextParams): Context;
// function buildContext(contextParams: SubscriptionContextParams): SubscriptionContext;
const buildContext = contextParams => {
  const {
    req,
    // set for queries and mutations
    res,
    // set for queries and mutations
    connection,
    // set for subscriptions
    payload,
    // set for subscriptions
    ...additionalContext
  } = contextParams;
  if (connection) {
    return buildCommonContext(connection.context.req, additionalContext);
  }

  // The UserObject is without the any in conflict: "'User' is not assignable to type 'UserObjectType'"
  const sharedContext = buildCommonContext(req, additionalContext);
  return {
    ...sharedContext,
    authenticate: (name, options) => promisifiedAuthentication(req, res, name, options),
    login: (user, options) => promisifiedLogin(req, user, options),
    logout: options => promisifiedLogout(req, options),
    res
  };
};
var _default = buildContext;
exports.default = _default;
//# sourceMappingURL=buildContext.js.map