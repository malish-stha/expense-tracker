{"version":3,"file":"types.js","names":[],"sources":["../src/types.ts"],"sourcesContent":["import ws from 'ws';\nimport { Request as ExpressRequest } from 'express';\nimport { IncomingMessage } from 'http';\nimport { ConnectionContext } from 'subscriptions-transport-ws';\n\n// tslint:disable-next-line:no-empty-interface\nexport interface AuthInfoTemplate {}\n\ntype SharedPassportContext<\n  UserObjectType extends {},\n  Credentials extends {},\n  AuthInfo extends AuthInfoTemplate,\n  Request extends object,\n> = {\n  authInfo?: AuthInfo;\n  user?: UserObjectType;\n  getUser(): UserObjectType | undefined;\n\n  login(user: UserObjectType, options?: any): Promise<void>;\n\n  logout(): void;\n  logOut(): void;\n\n  isAuthenticated(): boolean;\n  isUnauthenticated(): boolean;\n\n  authenticate(type: string, credentials: Credentials): Promise<AuthenticateReturn<UserObjectType>>;\n\n  req: Request;\n};\n\nexport type PassportContext<\n  UserObjectType extends {},\n  Credentials extends {},\n  AuthInfo extends AuthInfoTemplate = AuthInfoTemplate,\n  Request extends object = ExpressRequest,\n> = SharedPassportContext<UserObjectType, Credentials, AuthInfo, Request>;\n\nexport type PassportSubscriptionContext<\n  UserObjectType extends {},\n  Credentials extends {},\n  AuthInfo extends AuthInfoTemplate = AuthInfoTemplate,\n  SubscriptionRequest extends object = ConnectionContext,\n> = SharedPassportContext<UserObjectType, Credentials, AuthInfo, SubscriptionRequest>;\n\nexport type InfoArgument =\n  | string\n  | {\n      info: boolean;\n      message?: string;\n    };\n\nexport interface AuthenticateReturn<UserObjectType extends {}> {\n  user: UserObjectType | undefined;\n  info: InfoArgument | undefined;\n}\n\nexport interface WebSocket<Request extends {} = ExpressRequest> extends ws {\n  upgradeReq: IncomingMessage & Request;\n}\n"],"mappings":""}