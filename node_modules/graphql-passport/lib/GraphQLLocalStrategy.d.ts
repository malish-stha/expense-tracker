import { Strategy as PassportStrategy } from 'passport-strategy';
import { Request as ExpressRequest } from 'express';
import { PassportContext, InfoArgument } from './types';
declare type DoneFn = (error: any, user?: any, info?: InfoArgument) => void;
declare type VerifyFn = (username: unknown, password: unknown, done: DoneFn) => void;
declare type VerifyFnWRequest = <U extends {}, Request extends object = ExpressRequest>(req: Request | PassportContext<U, Request>, username: unknown, password: unknown, done: DoneFn) => void;
interface GraphQLLocalStrategyOptions {
    passReqToCallback?: boolean;
}
interface GraphQLLocalStrategyOptionsWithRequest extends GraphQLLocalStrategyOptions {
    passReqToCallback: true;
}
interface GraphQLLocalStrategyOptionsWithoutRequest extends GraphQLLocalStrategyOptions {
    passReqToCallback?: false;
}
declare class GraphQLLocalStrategy<U extends {}, Request extends ExpressRequest = ExpressRequest> extends PassportStrategy {
    constructor(verify: VerifyFn);
    constructor(options: GraphQLLocalStrategyOptionsWithoutRequest, verify: VerifyFn);
    constructor(options: GraphQLLocalStrategyOptionsWithRequest, verify: VerifyFnWRequest);
    verify: VerifyFn | VerifyFnWRequest;
    passReqToCallback: boolean | undefined;
    name: string;
    authenticate(req: Request, options: {
        username?: string;
        email?: string;
        password: string;
    }): void;
}
export default GraphQLLocalStrategy;
